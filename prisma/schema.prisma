// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guest {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String?
  bookings  Booking[]
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Table {
  id        String    @id @default(uuid())
  number    Int       @unique
  capacity  Int
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Booking {
  id        String   @id @default(uuid())
  guestId   String
  tableId   String
  dateTime  DateTime
  status    String   @default("pending") // pending, confirmed, cancelled
  price     Float // Booking fee or deposit, if applicable
  guest     Guest    @relation(fields: [guestId], references: [id])
  table     Table    @relation(fields: [tableId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItem {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  category    String // e.g., "Appetizer", "Main Course", "Dessert"
  isAvailable Boolean     @default(true)
  promotions  Promotion[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Promotion {
  id          String     @id @default(uuid())
  title       String
  description String?
  discount    Float // Percentage discount (e.g., 10 for 10% off)
  startDate   DateTime
  endDate     DateTime
  menuItems   MenuItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  guestId    String?
  total      Float
  status     String      @default("pending") // pending, completed, cancelled
  guest      Guest?      @relation(fields: [guestId], references: [id])
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id         String @id @default(uuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Float // Store the price at the time of order

  order    Order    @relation(fields: [orderId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
